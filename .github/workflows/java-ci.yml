# .github/workflows/java-ci.yml

name: Java CI with Maven

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the main branch
  # push:
  #   branches: [ main ] # Optional: run on direct pushes to main too

  # Triggers the workflow on pull request events targeting the main branch
  pull_request:
    branches: [ main ] # Or 'master' if that's your default branch
    types: [ opened, synchronize, reopened ] # Run when PR is opened, updated, or reopened

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job builds the code and runs the tests
  build_and_test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest # Use a standard Linux environment

    steps:
      # Step 1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4 # Use the latest version of the checkout action

      # Step 2: Set up JDK. Specify the version your project uses.
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23' # Or '11', '21', etc.
          distribution: 'temurin' # Popular distribution (formerly AdoptOpenJDK)
          cache: 'maven' # Enable caching for Maven dependencies

      # Step 3: Build and Test with Maven
      #          'mvn test' compiles and runs tests.
      #          '-B' runs Maven in non-interactive (batch) mode.
      - name: Build and run tests with Maven
        run: mvn -B test --file pom.xml

      # Optional Step 4: Upload test results (useful for detailed reports)
      # - name: Upload Test Results
        if: always() # Run this step even if the previous step fails
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_id }}
          path: target/surefire-reports/*.xml # Adjust path if necessary